{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GridGifItem/GridGifItem.js","components/GridGif.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategorty","setNombres","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","nombs","type","onChange","target","value","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GridGifItem","className","src","alt","GridGif","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GiftExpertApp","nombres","nombre","indice","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAGaA,EAAc,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,WAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAY,SAAAS,GAAK,OAAKP,GAAL,mBAAmBO,OACpCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,SAnBS,SAACN,GAClBF,EACIE,EAAEO,OAAOC,QAkBLA,MAAOX,O,+BCzBVY,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,sBAEDI,MAAMF,GAFL,cAEbG,EAFa,gBAGGA,EAAIC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAQ,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCCPO,G,KAAc,SAAC,GAAqB,EAAnBJ,GAAoB,IAAjBC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IACnC,OACI,sBAAKc,UAAU,6DAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAI,KACnB,6BAAKN,SCJJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SA+BrB,EC9BwB,SAACA,GAEzB,MAA0Bd,mBACtB,CACIqB,KAAM,GACNa,SAAS,IAHjB,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OATAC,qBAAY,WACRxB,EAAQC,GAAUwB,MACd,SAAAC,GAAI,OAAIH,EAAS,CACbf,KAAMkB,EACNL,SAAS,SAGlB,CAACpB,IAEGqB,EDYwBK,CAAa1B,GAArCoB,EAAP,EAAOA,QAAcP,EAArB,EAAgBN,KAEhB,OACI,qCACI,oBAAIS,UAAU,gEAAd,SAA+EhB,IAC7EoB,GAAW,mBAAGJ,UAAU,qDAAb,wBACb,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAK,SAAAkB,GACT,OAAO,cAAC,EAAD,eAAiCA,GAAfA,EAAMhB,aEJpCiB,MAjCf,WAGG,MAA8B1C,mBAAS,CAAE,YAAzC,mBAAO2C,EAAP,KAAgB5C,EAAhB,KAWD,OACE,qCACE,iDACA,cAAC,EAAD,CAAcA,WAAYA,IAC1B,uBACA,6BAEI4C,EAAQpB,KAAK,SAACqB,EAAOC,GAAR,OACX,cAAC,EAAD,CAEE/B,SAAU8B,GADLA,YChBJE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.35be0db8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategorty= ({setNombres}) =>{\n\n    const [inputValue, setinputValue] = useState(\"\");\n\n    const handleChange = (e) => {\n        setinputValue(\n            e.target.value\n        )\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputValue.trim().length > 2)\n        {\n            setNombres( nombs => [inputValue,...nombs])\n            setinputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                onChange={handleChange}\n                value={inputValue}\n            />\n            {/* <button onClick={(e)=>setNombres( nombs => [...nombs, inputValue])}>Agregar!</button> */}\n        </form>\n    )\n\n}\n\nAddCategorty.propTypes={\n    setNombres: PropTypes.func.isRequired\n}","\n\nexport const getGifs = async(category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=T3EPuJUBmYs22aFAGdHgkHQy8SPuynU2&q=${ encodeURI(category) }&limit=10`\n    const res = await fetch(url)\n    const {data}  = await res.json()\n    \n    const gifs = data.map( img => {\n        return ({\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url,\n        })\n    })\n\n    return gifs\n    \n}\n","import React from 'react';\nimport './GridGifItem.css'\n\nexport const GridGifItem = ({ id,title,url }) => {\n    return (\n        <div className=\"animate__animated animate__fadeIn animate_duration-1s card\">\n            <img src={url} alt=\"\"/>\n            <h4>{title}</h4>\n        </div>\n    )\n}\n","import { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GridGifItem } from './GridGifItem/GridGifItem';\nimport './GridGifItem/GridGifItem.css'\nexport const GridGif = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n    // useEffect( () => {\n    //     getGifs(category).then(\n    //         //imgs => setImages(imgs)\n    //         setImages\n    //     );\n    // },[ category ])\n\n    // const getData = async() => {\n    //     const url = `https://api.giphy.com/v1/gifs/search?api_key=T3EPuJUBmYs22aFAGdHgkHQy8SPuynU2&q=${ encodeURI(category) }&limit=10`\n    //     const res = await fetch(url)\n    //     const {data}  = await res.json()\n        \n    //     const gifs = data.map( img => {\n    //         return ({\n    //             id: img.id,\n    //             title: img.title,\n    //             url: img.images.downsized_medium.url,\n    //         })\n    //     })\n\n    //     setImages(\n    //         gifs\n    //     )\n        \n    // }\n    \n    //usamos custom hooks\n    const {loading, data:images} = useFetchGifs(category)\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeInDown animate__duration-500ms\">{category}</h3>\n            { loading && <p className=\"animate__animated animate__flash animate__infinite\">Loading...</p>}\n            <div className=\"card-grid\">\n                {images.map( image => {\n                    return <GridGifItem key={image.id} {... image}></GridGifItem>    \n                    })\n                }\n            </div>\n        </>\n    )\n}","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/GetGifs\";\n\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState(\n        {\n            data: [],\n            loading: true\n        }\n    );\n\n    useEffect ( ()=> {\n        getGifs(category).then(\n            imgs => setState({\n                data: imgs,\n                loading: false\n            })\n        )\n    }, [category])\n\n    return state\n}\n","import React, { useState } from 'react';\nimport './GifExpertApp.css';\nimport { AddCategorty } from './components/AddCategory'\nimport { GridGif } from './components/GridGif';\n\nfunction GiftExpertApp() {\n\n  \n   const [nombres, setNombres] = useState([ \"Saitama\"]);\n\n \n\n  // const handleAdd = (value) =>{\n  //   setNombres(\n  //     cats => [...cats,value]\n  //     //[...nombres, \"Pepa\"]\n  //   )\n  // } \n\n  return (\n    <>\n      <h2>Gift expert App</h2>\n      <AddCategorty setNombres={setNombres}></AddCategorty>\n      <hr/>\n      <ol>\n        { \n          nombres.map( (nombre,indice) =>(\n            <GridGif \n              key={nombre}\n              category={nombre}>\n            </GridGif> \n          ))\n        }\n      </ol>\n    </>\n  );\n}\n\nexport default GiftExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GifExpertApp></GifExpertApp>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}